#
# https://editor.swagger.io/
#
openapi: 3.0.0
info:
  title: VCSGis API
  description: >
    API to access VCSGis services
    
    
    The examples that appear in this document work on a table named **test**
    which has two unique columns:
    <ul>
    <li>*id*, of type integer, which is the unique key of the table </li>
    <li>*text* a string with text. </li>
    </ul> 
  version: 1.0.1
tags:
  - name: Application API
    description: >
      They provide the commands necessary to implement a 
      desktop client of a VCS.
  - name: Developers API
    description: >
      It exposes services to facilitate integration with 
      third-party applications.
paths:
  /rowcreate:
    post:
      operationId: rowcreate
      tags:
        - Developers API
      summary: >
          Create a new record in a table/entity. 
          This operacion is a shortcut to use a commit request.
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/auth'
        
      requestBody:
        description: >
          Data for creating the new record. 
          
          
          Provides the name of the table on which the operation will be performed,
          the revision code of the table in the working copy, **LocalRevisionCode**, 
          and the data with which the registry must be updated, **Data**,
          and insert the record in the data table creating a new revision.
          
          
          Fail if the revision code of the working copy is outdated
          or if the table or revision code is wrong.

          
          Optionally can provide a efective date and a comment for the new revision created.
                    
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RowCreateRequest'
            examples:
              request1:
                $ref: '#/components/examples/RowCreateRequest1'
        required: true
        
      responses:
        '200':
          description: >
            The response to the creation of a new record. 
            
            
            If the record is updated, the **StatusCode** returned is zero, 
            the code of the new revision created is returned is in **RevisionCode**
            and the new code asigned to the record is returned in **RelatedFeatureCode**.
            
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RowCreateResponse'
              examples:
                response1:
                  $ref: '#/components/examples/RowCreateResponse1'
                          
  /rowupdate:
    post:
      operationId: rowupdate
      tags:
        - Developers API
      summary: >
          Update a record in a table/entity. 
          This operacion is a shortcut to use a commit request.          
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/auth'
      requestBody:
        description: >
          Data for updating a record.
          
          Provides the name of the table on which the operation will be performed,
          the revision code of the table in the working copy, **LocalRevisionCode**, 
          and the data with which the registry must be updated, **Data**,
          and update the record in the data table creating a new revision.
          
          
          Fail if the revision code of the working copy is outdated,
          if the table or revision code is wrong
          or if the **Data** don't contains a valid VCSGISCODE field.
          
          
          Optionally can provide a efective date and a comment for the new revision created.                    
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RowUpdateRequest'
            examples:
              request1:
                $ref: '#/components/examples/RowUpdateRequest1'
        required: true
      responses:
        '200':
          description: >
            The response to the creation of a new record. 
            
            
            If the record is updated, the **StatusCode** returned is zero, 
            and the code of the new revision created is returned is in **RevisionCode**. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RowUpdateResponse'
              examples:
                response1:
                  $ref: '#/components/examples/RowUpdateResponse1'
              
  /rowdelete:
    post:
      operationId: rowdelete
      tags:
        - Developers API
      summary: >
        Delete a record in a table/entity.
        This operacion is a shortcut to use a commit request.
        
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/auth'
      requestBody:
        description: >
          Data for deletion of a record.
          
          
          Provides the name of the table on which the operation will be performed,
          the revision code of the entity/table in the working copy, **LocalRevisionCode**, 
          and the code of the record to delete, **RelatedFeatureCode**,
          and delete the record in the table creating a new revision.
          
          
          Fail if the revision code of the working copy is outdated,
          if the table or revision code is wrong
          or if the code of the record to delete is wrong.

          
          Optionally can provide a efective date and a comment for the new revision created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RowDeleteRequest'
            examples:
              request1:
                $ref: '#/components/examples/RowDeleteRequest1'
        required: true
      responses:
        '200':
          description: >
            The response of the deletion of a record. 
            
            
            If the record is deleted, the **StatusCode** returned is zero, 
            and the code of the new revision created is returned is in **RevisionCode**. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RowDeleteResponse'
              examples:
                response1:
                  $ref: '#/components/examples/RowDeleteResponse1'
  
  /update:
    post:
      operationId: update
      tags:
        - Application API
      summary: >
        Brings changes from the repository to your working copy.
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/auth'
      requestBody:
        description: >
          It contains the information to determine what data should be sent to the client
          to mantain it up to date.
          

          Provides the name of the table on which the operation will be performed
          and the revision code of the table in the working copy, **LocalRevisionCode**.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequest'
            examples:
              request1:
                $ref: '#/components/examples/UpdateRequest1'
        required: true
      responses:
        '200':
          description: >
            The response of the update request. 
            
            
            if the operacion can be performed ok, the **StatusCode** is zero, 
            and returns the metadata of the table and the list of changes required 
            to keep it up to date.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResponse'
              examples:
                response1:
                  $ref: '#/components/examples/UpdateResponse1'
  
  /authenticate:
    post:
      operationId: authenticate
      tags:
        - Application API
      summary: >
         Authenticate a user in the repository.
      requestBody:
        description: >
          The request contains the user identifier and the password.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticateRequest'
            examples:
              request1:
                $ref: '#/components/examples/AuthenticateRequest1'
        required: true
      responses:
        '200':
          description: >
            The response of the authentication request. 
            
            
            if the operacion can be performed ok, the **StatusCode** is zero, 
            and returns the user code and an authentication token. The token 
            and user code can be sent in the other request as GET parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticateResponse'
              examples:
                response1:
                  $ref: '#/components/examples/AuthenticateResponse1'
          links:
            UpdateUser:
              description: >
                Parametro nombre codigo de usuario.
              operationId: update
              parameters:
                user: '$response.body#/Parameters/UserCode'
            UpdateAuth:
              description: >
                Parametro nombre codigo de usuario.
              operationId: update
              parameters:
                auth: '$response.body#/Parameters/AuthenticationToken'
            EntitiesUser:
              description: >
                Parametro nombre codigo de usuario.
              operationId: entities
              parameters:
                user: '$response.body#/Parameters/UserCode'
            EntitiesAuth:
              description: >
                Parametro nombre codigo de usuario.
              operationId: entities
              parameters:
                auth: '$response.body#/Parameters/AuthenticationToken'
            CommitUser:
              description: >
                Parametro nombre codigo de usuario.
              operationId: commit
              parameters:
                user: '$response.body#/Parameters/UserCode'
            CommitAuth:
              description: >
                Parametro nombre codigo de usuario.
              operationId: commit
              parameters:
                auth: '$response.body#/Parameters/AuthenticationToken'
            CheckoutUser:
              description: >
                Parametro nombre codigo de usuario.
              operationId: checkout
              parameters:
                user: '$response.body#/Parameters/UserCode'
            CheckoutAuth:
              description: >
                Parametro nombre codigo de usuario.
              operationId: checkout
              parameters:
                auth: '$response.body#/Parameters/AuthenticationToken'
            HistoryUser:
              description: >
                Parametro nombre codigo de usuario.
              operationId: history
              parameters:
                user: '$response.body#/Parameters/UserCode'
            HistoryAuth:
              description: >
                Parametro nombre codigo de usuario.
              operationId: history
              parameters:
                auth: '$response.body#/Parameters/AuthenticationToken'
            UsersUser:
              description: >
                Parametro nombre codigo de usuario.
              operationId: users
              parameters:
                user: '$response.body#/Parameters/UserCode'
            UsersAuth:
              description: >
                Parametro nombre codigo de usuario.
              operationId: users
              parameters:
                auth: '$response.body#/Parameters/AuthenticationToken'
            TopologyplansUser:
              description: >
                Parametro nombre codigo de usuario.
              operationId: topologyplans
              parameters:
                user: '$response.body#/Parameters/UserCode'
            TopologyplansAuth:
              description: >
                Parametro nombre codigo de usuario.
              operationId: topologyplans
              parameters:
                auth: '$response.body#/Parameters/AuthenticationToken'
                  
  /entities:
    post:
      operationId: entities
      tags:
        - Application API
      summary: >
         List entity entries in the repository.
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/auth'
      responses:
        '200':
          description: >
            The response of the entities request. 
            
            
            if the operacion can be performed ok, the **StatusCode** is zero, 
            and returns a list of "entities" in the repository.
            
            
            Not all the entity's data is sent. Some are set to null, 
            such as the table structure. **FeatureTypeAsJson** or the 
            authorizations. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitiesResponse'
              examples:
                response1:
                  $ref: '#/components/examples/EntitiesResponse1'

  /commit:
    post:
      operationId: commit
      tags:
        - Application API
      summary: >
         Send changes from your working copy to the repository.
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/auth'
      requestBody:
        description: >
          This request is used both to send new tables to the repository and to 
          send the changes made in the working copy to existing tables in the repository.


          When new tables are sent, a complete entity must be supplied, also 
          indicating the structure of the new table, along with all the 
          data in the table.


          If only changes are going to be sent, instead of sending a complete entity it will
          only be necessary to send the codes of the entity to be updated. And the data 
          of the table to be sent could be of three types	&#58;
          <ul>
          <li>insertion, when new records are created.</li>
          <li>update, when you want to update a record.</li>
          <li>deleted, when you want to remove an existing record from the repository.</li>
          </ul>

          Furthermore, in a commit, only a single operation can be performed on a 
          record. This is&#58;
          <ul>
          <li>there cannot be an insert and an update of the same record. If this is 
          the case, only one insert change should be sent with the insert and update 
          data consolidated.</li>
          <li>there cannot be an insert or update together with a deletion of the same 
          record. Only the delete operation will be sent.</li>
          <li>There cannot be more than one update of the same record. If this is the 
          case, only one update change should be sent with the data of the two 
          consolidated updates.</li>
          </ul>
          
          
          The codes for the new records, changes and new entities can be generateds on the 
          client.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitRequest'
            examples:
              request1:
                $ref: '#/components/examples/CommitRequest1'
        required: true
        
      responses:
        '200':
          description: >
            The response of the commit request. 
            
            
            if the operacion can be performed ok, the **StatusCode** is zero, 
            and returns a list of "entities" updateds in the repository.
            Not all the entity's data is sent. Some are set to null, 
            such as the table structure. **FeatureTypeAsJson** or the 
            authorizations. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitResponse'
              examples: 
                response1:
                  $ref: '#/components/examples/CommitResponse1'

  /checkout:
    post:
      operationId: checkout
      tags:
        - Application API
      summary: >
        Check out a working copy from a repository.
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/auth'
      requestBody:
        description: XXX.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckoutRequest'
            examples:
              request1:
                $ref: '#/components/examples/CheckoutRequest1'
        required: true
        
      responses:
        '200':
          description: successful operation. A CheckoutResponse Object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutResponse'
              examples:
                response1:
                  $ref: '#/components/examples/CheckoutResponse1'

  
  /history:
    post:
      operationId: history
      tags:
        - Application API
      summary: >
         xxx.
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/auth'
      requestBody:
        description: >
          XXX.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HistoryRequest'
            examples:
              request1:
                $ref: '#/components/examples/HistoryRequest1'
        required: true
        
      responses:
        '200':
          description: successful operation. A HistoryResponse Object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoryResponse'
              examples:
                response1:
                  $ref: '#/components/examples/HistoryResponse1'

  
  /users:
    post:
      operationId: users
      tags:
        - Application API
      summary: >
         xxx.
      responses:
        '200':
          description: successful operation. A UsersResponse Object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
              examples:
                response1:
                  $ref: '#/components/examples/UsersResponse1'

  
  /topologyplans:
    post:
      operationId: topologyplans
      tags:
        - Application API
      summary: >
         xxx.
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/auth'
      responses:
        '200':
          description: successful operation. A CommitResponse Object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyplansResponse'
              examples:
                response1:
                  $ref: '#/components/examples/TopologyplansResponse1'
  
components:

  parameters:
    user:
      name: user
      in: query
      description: User code 
      required: false
      schema:
        type: string      
        format: string80
    auth:
      name: auth
      in: query
      description: Authentication token
      required: false
      schema:
        type: string      

  schemas:
    Entity:
      type: object
      description: >
        This object represents an entity or table on the repository. 
        
        It contains the metadata of this, such as its name, code, code of 
        the last revision, user who created it ...
      properties:
        EntityCode:
          type: string
          format: string60
          description: > 
            Code of this entity.
            
            
            When the client add a new table/entity must create a valid entity code.
        EntityName:
          type: string
          description: >
            Name of this entity.
            It can not be null.            
        DatatableName:
          type: string
          description: >
            Name of the table in which the entity's data is stored.
            
            
            It can be null.          
            The default value must be VCSGIS_DATA.
        Description:
          type: string
          description: >
            This is description for this entity. Can be null.
        FeatureIdFieldName:
          type: string
          description: >
            Name of the feature attrubute that store the unique key that identify it.
            
            
            It can be null.          
            The default value must be VCSGISCODE.
        FeatureTypeAsJson:
          type: string
          description: >
            It is a json string that describes the structure of the features 
            associated with this entity. The structure of this json is specific 
            to *gvSIG desktop*, following the serialization format of 
            a *FeatureType* object.


            It will be null except in the response to the "chechout" 
            request and in the request "commit" when a new entity is created.
        FieldForLabel:
          type: string
          description: >
            Contains the name of the attribute of the feature of this entity 
            to be used as a label when a value of this entity must be presented 
            to the user (in lists, tables, forms...).          

            
            It can be null.          
        GeometryFieldName:
          type: string
          description: >
            Name of the attribute of the feature that stores the geometry. 
            In case the feature does not contain a geometry attribute.
            
            
            It can be null.          
        RevisionCode:
          type: string
          description: >
            Code of the last revision of this entity in the repository.    
            
            
            It can not be null.            
        TopologyPlanCode:
          type: string
          description: >
            Code of the topology plan associated with this entity. 
            The client should have passed this topological plan before 
            committing this entity.            

            It can be null.          
        TopologyPlanMode:
          type: integer
          description: >
            Indicates whether it is mandatory or recommended that the topology 
            plan be passed before committing. Possible values are&#58; 
              - 0 for recomended
              - 1 for mandatory


            If "TopologyPlanCode" is null, this value is ignored.
          enum:
            - 0 # Recomended
            - 1 # Mandatory
        UserCode:
          type: string
          description: >
            User code that registered the / table entity in the repository.
        Category:
          type: string
          description: >
            A comma separated list of category names or labels to assign to the entity.
            
            Normally it will be used to group entities by them when they are going 
            to be shown to the user.          


            it can be null.          
        Label:
          type: string
          description: >
            An alternative name or label to use when displaying the entity to the user.


            it can be null.          
        Authorizations:
          type: string
          description: >
            It will always be null.
        Resources:
          type: string
          description: >
            Name of the table in which the resources associated with this 
            entity are stored.


            it can be null.          
        DataModels:
          type: string
          description: >
            Comma-separated list of data model names to which this entity belongs.        
      #example:
      #  $ref: '#/components/examples/Entity'
        
    UpdateRequest:
      required:
      - EntityName
      - LocalRevisionCode
      type: object
      description: >
        This object is used in the body of a update request.


        This object contains the information necessary to determine what 
        data should be sent to the client so that the data of a table is 
        updated with the last revision of this one.
      properties:
        Parameters:
          type: object
          required:
          - EntityName
          - LocalRevisionCode
          properties:
            EntityName:
              type: string
              description: >
                Name of the table we want to update
            LocalRevisionCode:
              type: string
              format: string60
              description: >
                Code of the revision in which the client data is located
      #example:
      #  $ref: '#/components/examples/UpdateRequest1'

    UpdateResponse:
      type: object
      description: >
        This object is used in the response to a update request.


        It contains the necessary data to update the local table and to go 
        from being in the revision in which it is to the last revision 
        that the server contains.
        

        In **Data** a list will be returned with the data of the records 
        that must be updated, inserted or deleted in the local table so
        that it remains synchronized with the repository.        
      properties:
        Parameters:
          type: object 
          properties:
            StatusCode:
              type: integer
              description: "Operation status code. Zero when the operation has done correctly."
            StatusMessage:
              type: string
              description: "In case the operation did not go well, a message describing the problem."
            Entity:
              $ref: "#/components/schemas/Entity"
        Data:
          type: array
          items:
            type: object
            properties:
              DataCode:
                type: string
                description: >
                  Unique identifier asociated to this entry.
              EntityCode:
                type: string
                description: >
                  The entity code, table, asociated to this entry.
              RevisionCode:
                type: string
                description: >
                  The revision code asociated to this entry.
              Operation:
                type: integer
                description: >
                  The operation asociated to this entry:
                    - 0 for delete
                    - 1 for update
                    - 2 for insert
                enum:
                  - 0 # Delete
                  - 1 # Update
                  - 2 # Insert
              RevisionNumber:
                type: string
                description: >
                  The revision number asociated to this entry
              EfectiveDate:
                type: string
                format: timestamp
                description: >
                  The efective date asociated to this entry
              FeatureRelatedCode:
                type: string
                description: >
                  The code that identify the feature in the VCS.
              Data:
                type: string
                description: "The feature data coded as a json string."
      #example:
      #  $ref: '#/components/examples/UpdateResponse1'


    AuthenticateRequest:
      required:
      - EntityName
      - LocalRevisionCode
      type: object
      description: >
        This request authenticates a user against the repository.
        
        
        If the user is authenticated correctly, it will return the user's code 
        and an authentication token that must be passed as parameters in 
        subsequent requests against this repository.

        
        The supplied token has a temporary validity past which the user must 
        re-authenticate to obtain a new token.
      properties:
        Parameters:
          required:
          - UserId
          - Password
          properties:
            UserId:
              type: string
              description: >
                Identifier of the user to be authenticated.
            Password:
              type: string
              description: >
                Password of the user to be authenticated.
    
    AuthenticateResponse:
      type: object
      description: >
        This object is the response to an authentication request.
        
        
        In case the authentication has been successful, in *AuthenticationToken* 
        we will have the authentication token and in *UserCode* the user's code.
      properties:
        Parameters:
          properties:
            StatusCode:
              type: integer
              description: "Operation status code. Zero when the operation has done correctly."
            StatusMessage:
              type: string
              description: "In case the operation did not go well, a message describing the problem."
            UserCode:              
              type: string
              description: >
                User code associated with the authenticated user.
            AuthenticationToken:              
              type: string
              description: >
                Authentication token returned by the repository access service. 
                This token must be passed every time a request is made to 
                the repository.                
                
    CommitRequest:
      required:
      - EntityName
      - LocalRevisionCode
      type: object
      description: >
        This object is used in the body of a update request.


        This object contains the information necessary to determine what 
        data should be sent to the client so that the data of a table is 
        updated with the last revision of this one.
      properties:
        Parameters:
          description: >
            This object is part of the UpdateRequest object.
          required:
          - EntityName
          - LocalRevisionCode
          properties:
            EntityName:
              type: string
              description: >
                Name of the table we want to update
            LocalRevisionCode:
              type: string
              format: string60
              description: >
                Code of the revision in which the client data is located
    
    CommitResponse:
      type: object
      description: >
        This object is used in the response to a update request.


        It contains the necessary data to update the local table and to go 
        from being in the revision in which it is to the last revision 
        that the server contains.
      properties:
        Parameters:
          type: object
          description: >
            This object is part in the response of a update request.
    
          properties:
            StatusCode:
              type: integer
              description: "Operation status code. Zero when the operation has done correctly."
            StatusMessage:
              type: string
              description: "In case the operation did not go well, a message describing the problem."
            Entity:
              $ref: "#/components/schemas/Entity"
        Data:
          type: "array"
          items:
            type: object
            description: >
              This object defines the data associated with a record that has 
              changed in a table. It tells us if we should delete our record 
              from the working copy, update it or insert a new one, as well 
              as the data associated with the records.
            properties:
              DataCode:
                type: string
                description: >
                  Unique identifier asociated to this entry.
              EntityCode:
                type: string
                description: >
                  The entity code, table, asociated to this entry.
              RevisionCode:
                type: string
                description: >
                  The revision code asociated to this entry.
              Operation:
                type: integer
                description: >
                  The operation asociated to this entry:
                    - 0 for delete
                    - 1 for update
                    - 2 for insert
                enum:
                  - 0 # Delete
                  - 1 # Update
                  - 2 # Insert
              RevisionNumber:
                type: string
                description: >
                  The revision number asociated to this entry
              EfectiveDate:
                type: string
                format: timestamp
                description: >
                  The efective date asociated to this entry
              FeatureRelatedCode:
                type: string
                description: >
                  The code that identify the feature in the VCS.
              Data:
                type: string
                description: "The feature data coded as a json string."

    CheckoutRequest:
      required:
      - EntityName
      - LocalRevisionCode
      type: object
      description: >
        This object is used in the body of a update request.


        This object contains the information necessary to determine what 
        data should be sent to the client so that the data of a table is 
        updated with the last revision of this one.

      properties:
        Parameters:
          description: >
            This object is part of the UpdateRequest object.
          required:
          - EntityName
          - LocalRevisionCode
          properties:
            EntityName:
              type: string
              description: >
                Name of the table we want to update
            LocalRevisionCode:
              type: string
              format: string60
              description: >
                Code of the revision in which the client data is located
    
    CheckoutResponse:
      type: object
      description: >
        This object is used in the response to a update request.


        It contains the necessary data to update the local table and to go 
        from being in the revision in which it is to the last revision 
        that the server contains.
      properties:
        Parameters:
          type: object
          description: >
            This object is part in the response of a update request.
    
          properties:
            StatusCode:
              type: integer
              description: "Operation status code. Zero when the operation has done correctly."
            StatusMessage:
              type: string
              description: "In case the operation did not go well, a message describing the problem."
            Entity:
              $ref: "#/components/schemas/Entity"
            UsershashCode: 
              type: string
              description: >
                Hash code of the users table contents. It can be used to
                identify changes between the repository and the copy in the 
                working copy of the users table. 
                It is the responsibility of the client to update the user 
                table, by calling the service "/users", if the contents of this 
                have changed from those in the repository.
            TopologyPlansHashCode:
              type: string
              description: >
                Hash code of the topology plans table contents. It can be used to
                identify changes between the repository and the copy in the 
                working copy of the topology plans table. 
                It is the responsibility of the client to update the topology 
                plans table, by calling the service "/topologyplans", if the
                contents of this have changed from those in the repository.
        Data:
          type: "array"
          items:
            type: object
            description: >
              This object defines the data associated with a record that has 
              changed in a table. It tells us if we should delete our record 
              from the working copy, update it or insert a new one, as well 
              as the data associated with the records.
            properties:
              DataCode:
                type: string
                description: >
                  Unique identifier asociated to this entry.
              EntityCode:
                type: string
                description: >
                  The entity code, table, asociated to this entry.
              RevisionCode:
                type: string
                description: >
                  The revision code asociated to this entry.
              Operation:
                type: integer
                description: >
                  The operation asociated to this entry:
                    - 0 for delete
                    - 1 for update
                    - 2 for insert
                enum:
                  - 0 # Delete
                  - 1 # Update
                  - 2 # Insert
              RevisionNumber:
                type: string
                description: >
                  The revision number asociated to this entry
              EfectiveDate:
                type: string
                format: timestamp
                description: >
                  The efective date asociated to this entry
              FeatureRelatedCode:
                type: string
                description: >
                  The code that identify the feature in the VCS.
              Data:
                type: string
                description: "The feature data coded as a json string."

    EntitiesResponse:
      type: object
      description: >
        This object is used in the response to a entities request.
        
        The *FeatureTypeAsJson* and *Authorizations* fields of the entity list 
        will always be null.
      properties:
        Parameters:
          properties:
            StatusCode:
              type: integer
              description: "Operation status code. Zero when the operation has done correctly."
            StatusMessage:
              type: string
              description: "In case the operation did not go well, a message describing the problem."
            Entities:
              type: array
              items:
                $ref: "#/components/schemas/Entity"
              

    HistoryRequest:
      required:
      - EntityName
      - LocalRevisionCode
      type: object
      description: >
        XXX.

      properties:
        Parameters:
          description: >
            XXX.
          required:
          - EntityName
          properties:
            EntityName:
              type: string
              description: "Name of the table we want to update"
            MaxDate:
              type: string
              format: timestamp
              description: "XXX."
            MinDate:
              type: string
              format: timestamp
              description: "XXX."
            MaxRevisionNumber:
              type: integer
              description: "XXX."
            MinRevisionNumber:
              type: integer
              description: "XXX."
            MaxNumberOfRevisions:
              type: integer
              description: "XXX."

    HistoryResponse:
      type: object
      description: >
        XXX.
      properties:
        Parameters:
          description: >
            XXX.
    
          properties:
            StatusCode:
              type: integer
              description: "Operation status code. Zero when the operation has done correctly."
            StatusMessage:
              type: string
              description: "In case the operation did not go well, a message describing the problem."
        Data:
          type: "array"
          items:
            type: object
            description: >
              XXX.
            properties:
              EntityCode:
                type: string
                format: string60
                description: "The entity code asociated to this revision."
              RevisionCode:
                type: string
                format: string60
                description: "The code of this revision"
              EfectiveDate:
                type: string
                format: timestamp
                description: "The efective date of this revision"
              RevisionDate:
                type: string
                format: timestamp
                description: "The date of this revision"
              UserCode:
                type: string
                format: string60
                description: ""
              Number:
                type: integer
                description: "The revision number"
              Comment:
                type: string
                description: ""
              Tags:
                type: string
                description: ""
              TopologyPlan:
                type: integer
                description: "Status of the topology plan asociated to this revision."

    UsersResponse:
      type: object
      description: >
        XXX.
      properties:
        Parameters:
          description: >
            XXX.
    
          properties:
            StatusCode:
              type: integer
              description: "Operation status code. Zero when the operation has done correctly."
            StatusMessage:
              type: string
              description: "In case the operation did not go well, a message describing the problem."
        Data:
          type: "array"
          items:
            type: object
            description: >
              XXX.
            properties:
              UserCode:
                type: string
                format: string60
                description: "The entity code asociated to this revision."
              Identifier:
                type: string
                description: "The code of this revision"
              AllowedOperations:
                type: string
                description: "XXX"
              Roles:
                type: string
                description: "XXX"
              Description:
                type: string
                description: ""

    TopologyplansResponse:
      type: object
      description: >
        XXX.
      properties:
        Parameters:
          description: >
            XXX.
    
          properties:
            StatusCode:
              type: integer
              description: "Operation status code. Zero when the operation has done correctly."
            StatusMessage:
              type: string
              description: "In case the operation did not go well, a message describing the problem."
        Data:
          type: "array"
          items:
            type: object
            description: >
              XXX.
            properties:
              TopologyPlanCode:
                type: string
                format: string60
                description: "The entity code asociated to this revision."
              Name:
                type: string
                description: "The name of this topology plan"
              Description:
                type: string
                description: ""
              Data:
                type: string
                description: ""


    RowCreateRequest:
      required:
      - EntityName
      - LocalRevisionCode
      - Data
      type: object
      description: >
        This object represents a request to create a new record in a
        table.

        When the record is created, a unique code will be assigned with
        the VCS, overwriting the value of the VCSGISCODE attribute with the new
        value.

      properties:
        EntityName:
          type: string
          description: >
            Name of the table in which to create the new record
        LocalRevisionCode:
          type: string
          format: string60
          description: >
            Code of the revision in which the client data is found
        EfectiveDate:
          type: string
          format: timestamp
          description: >
            Efective date of the operation, in the format yyyy-mm-dd
            hh: MM: ss.LLL. In case of being null, the current date will be assigned.
        Comment:
          type: string
          description: >
            Comment associated with the operation to be performed. It can be null.
        Data:
          type: string
          description: >
            The feature data to create in the table coded as a
            string json. If the feature has the VCSGISCODE field it will be
            overwritten, assigning a new code to it.
            
    RowCreateResponse:
      type: object
      description: >
        This object represents the response to a request to create a new
        record in a table.
        You will inform us of the status of the request, as well as:
          - The code of the new record created.
          - The code of the revision in which the
            table on the server.

      properties:
        StatusCode:
          type: integer
          description: >
            Status code of the operation. Zero when the operation has been
            done correctly.
        StatusMessage:
          type: string
          description: >
            In case the operation did not go well, a message describing
            the problem.
        RelatedFeatureCode:
          type: string
          format: string60
          description: >
            Code assigned to the VCSGISCODE field of the new record, which
            represents the identifier of this in the VCS.
        EntityName:
          type: string
          description: >
            Name of the table in which the new one was requested to be created
            registry
        EntityCode:
          type: string
          format: string60
          description: >
            Internal code associated with the table to identify it in a way
            Unique.
        RevisionCode:
          type: string
          format: string60
          description: >
            Code of the revision in which the data is found in the
            server after the operation is performed.


    RowUpdateRequest:
      required:
      - EntityName
      - LocalRevisionCode
      - Data
      type: object
      description: >
        This object represents a request to update a record in a
        table.

        It is essential that the value of the VCSGISCODE attribute of the 
        data of the record that we want to update has the correct code, 
        since it is used to identify the record we want to update.

      properties:
        EntityName:
          type: string
          description: >
            Name of the table in which the record is requested to be updated
        LocalRevisionCode:
          type: string
          format: string60
          description: >
            Code of the revision in which the client data is located
        EfectiveDate:
          type: string
          format: timestamp
          description: >
            Efective date of the operation, in the format yyyy-mm-dd
            hh:MM:ss.LLL. In case of being null, the current date will be assigned.
        Comment:
          type: string
          description: >
            Comment associated with the operation to be performed. It can be null.
        Data:
          type: string
          description: >
            The feature data to create in the table coded as a
            string json. The VCSGISCODE attribute must have a valid code and
            It will identify the record that is being updated.
            
    RowUpdateResponse:
      type: object
      description: >
        This object represents the response to a request to update a
        record in a table.

      properties:
        StatusCode:
          type: integer
          description: >
            Operation status code. Zero when the operation has
            done correctly.
        StatusMessage:
          type: string
          description: >
            In case the operation did not go well, a message describing
            the problem.
        EntityName:
          type: string
          description: >
            Name of the table in which the requested was create the new record
        EntityCode:
          type: string
          format: string60
          description: >
            Internal code associated with the table to identify.
        RevisionCode:
          type: string
          format: string60
          description: >
            Code of the revision in which the data is found in the
            server after the operation is performed.

    RowDeleteRequest:
      required:
      - EntityName
      - LocalRevisionCode
      - RelatedFeatureCode
      type: object
      description: >
        This object represents a request to delete a record in a
        table.


        The record to be deleted will be identified by the value of the
        *RelatedFeatureCode* attribute.
        
      properties:
        EntityName:
          type: string
          description: >
            Name of the table in which to delete the record
        LocalRevisionCode:
          type: string
          format: string60
          description: >
            Code of the revision in which the client data is located
        EfectiveDate:
          type: string
          format: timestamp
          description: >
            Efective date of the operation, in the format yyyy-mm-dd
            hh:MM:ss.LLL. In case of being null, the current date will be assigned.
        Comment:
          type: string
          description: >
            Comment associated with the operation to be performed. It can be null.
        RelatedFeatureCode:
          type: string
          format: string60
          description: >
            Code of the record to be deleted. Delete the record that
            have the value of the VCSGISCODE attribute as the value of this field.
    
    RowDeleteResponse:
      type: object
      description: >
        This object represents the response to a request to delete a
        record in a table.

      properties:
        StatusCode:
          type: integer
          description: >
            Operation status code. Zero when the operation has
            done correctly.
        StatusMessage:
          type: string
          description: >
            In case the operation did not go well, a message describing
            the problem.
        EntityName:
          type: string
          description: >
            Name of the table in which the new one was requested to be created
            registry
        EntityCode:
          type: string
          format: string60
          description: >
            Internal code associated with the table to identify.
        RevisionCode:
          type: string
          format: string60
          description: >
            Code of the revision in which the data is found in the
            server after the operation is performed.


  examples:
    Entity:
      value: {
            "DataTableName":"VCSGIS_DATA",
            "Description":null,
            "EntityCode":"00000000000004abcdef0123456789",
            "EntityName":"test",
            "FeatureIdFieldName":"VCSGISCODE",
            "FeatureTypeAsJson":null,
            "FieldForLabel":"text",
            "GeometryFieldName":null,
            "RevisionCode":"00000000000032abcdef0123456789",
            "TopologyPlanCode":null,
            "UserCode":null,
            "Category":null,
            "Label":"test",
            "Authorizations":null,
            "TopologyPlanMode":0,
            "Resources":null,
            "DataModels":null
        }

      
    RowCreateRequest1:
      value: {
          "EntityName":"test",
          "LocalRevisionCode":"00000000000016abcdef0123456789",
          "EfectiveDate":"2020-02-18 10:11:12.123",
          "Comment":"test row create (4,ddd)",
          "Data":"\n{\n    \"id\":4,\n    \"text\":\"DDD\",\n    \"VCSGISCODE\":\"\"\n}"
        }
    
    RowCreateResponse1:
      value: {
          "StatusCode":0,
          "StatusMessage":null,
          "RelatedFeatureCode":"00000000000024abcdef0123456789",
          "EntityName":"test",
          "EntityCode":"00000000000004abcdef0123456789",
          "RevisionCode":"00000000000026abcdef0123456789"
        }

    RowUpdateRequest1:
      value: {
          "EntityName":"test",
          "LocalRevisionCode":"00000000000026abcdef0123456789",
          "EfectiveDate":null,
          "Comment":"test row update (4,dd2)",
          "Data":"\n{\n    \"id\":4,\n    \"text\":\"DD2\",\n    \"VCSGISCODE\":\"00000000000024abcdef0123456789\"\n}"
        }
    
    RowUpdateResponse1:
      value: {
          "StatusCode":0,
          "StatusMessage":null,
          "EntityName":"test",
          "EntityCode":"00000000000004abcdef0123456789",
          "RevisionCode":"00000000000031abcdef0123456789"
        }
        
    RowDeleteRequest1:
      value: {
          "EntityName":"test",
          "LocalRevisionCode":"00000000000031abcdef0123456789",
          "RelatedFeatureCode":"00000000000024abcdef0123456789",
          "EfectiveDate":"2020-02-19 10:11:12.123",
          "Comment":"test row delete (4,dd2)"
        }
    
    RowDeleteResponse1:
      value: {
          "StatusCode":0,
          "StatusMessage":null,
          "EntityName":"test",
          "EntityCode":"00000000000004abcdef0123456789",
          "RevisionCode":"00000000000036abcdef0123456789"
        }

    UpdateRequest1:
      value: {
          "Parameters":{
              "EntityName":"test",
              "LocalRevisionCode":"00000000000016abcdef0123456789"
          }
        }
    
    UpdateResponse1:
      value: {
                "Parameters":{
                    "StatusCode":0,
                    "StatusMessage":"_No_errors",
                    "Entity":{
                        "DataTableName":"VCSGIS_DATA",
                        "Description":null,
                        "EntityCode":"00000000000004abcdef0123456789",
                        "EntityName":"test",
                        "FeatureIdFieldName":"VCSGISCODE",
                        "FieldForLabel":"text",
                        "GeometryFieldName":null,
                        "RevisionCode":"00000000000032abcdef0123456789",
                        "TopologyPlanCode":null,
                        "UserCode":null,
                        "Category":null,
                        "Label":"test",
                        "TopologyPlanMode":0,
                        "Resources":null,
                        "DataModels":null
                    }
                },
                "Data":[
                    {
                        "DataCode":"00000000000036abcdef0123456789",
                        "EntityCode":"00000000000004abcdef0123456789",
                        "RevisionCode":"00000000000032abcdef0123456789",
                        "RevisionNumber":1,
                        "EfectiveDate":"2020-02-17 10:11:12.123",
                        "Operation":2,
                        "FeatureRelatedCode":"00000000000026abcdef0123456789",
                        "Data":"\n{\n    \"id\":4,\n    \"text\":\"DDD\",\n    \"VCSGISCODE\":\"00000000000026abcdef0123456789\"\n}"
                    },
                    {
                        "DataCode":"00000000000034abcdef0123456789",
                        "EntityCode":"00000000000004abcdef0123456789",
                        "RevisionCode":"00000000000032abcdef0123456789",
                        "RevisionNumber":1,
                        "EfectiveDate":"2020-02-17 10:11:12.123",
                        "Operation":1,
                        "FeatureRelatedCode":"00000000000008abcdef0123456789",
                        "Data":"\n{\n    \"id\":2,\n    \"text\":\"BB2\",\n    \"VCSGISCODE\":\"00000000000008abcdef0123456789\"\n}"
                    }
                ]
        }
        
    CommitRequest1:
      value: {
              "Parameters":{
                  "EfectiveDate":null,
                  "RevisionDate":null,
                  "Comment":null,
                  "Entities":null,
                  "NewEntityCodes":[
                      "00000000000004abcdef0123456789"
                  ]
              },
              "Data":[
                  {
                      "Code":"00000000000007abcdef0123456789",
                      "EntityCode":"00000000000004abcdef0123456789",
                      "Operation":2,
                      "RelatedFeatureCode":"00000000000006abcdef0123456789",
                      "Data":"\n{\n    \"id\":1,\n    \"text\":\"AAA\",\n    \"VCSGISCODE\":\"00000000000006abcdef0123456789\"\n}"
                  },
                  {
                      "Code":"00000000000009abcdef0123456789",
                      "EntityCode":"00000000000004abcdef0123456789",
                      "Operation":2,
                      "RelatedFeatureCode":"00000000000008abcdef0123456789",
                      "Data":"\n{\n    \"id\":2,\n    \"text\":\"BBB\",\n    \"VCSGISCODE\":\"00000000000008abcdef0123456789\"\n}"
                  },
                  {
                      "Code":"00000000000011abcdef0123456789",
                      "EntityCode":"00000000000004abcdef0123456789",
                      "Operation":2,
                      "RelatedFeatureCode":"00000000000010abcdef0123456789",
                      "Data":"\n{\n    \"id\":3,\n    \"text\":\"CCC\",\n    \"VCSGISCODE\":\"00000000000010abcdef0123456789\"\n}"
                  }
              ]
        }
    
    CommitResponse1:
      value: {
          "Parameters":{
              "StatusCode":0,
              "StatusMessage":null,
              "Entities":[
                  {
                      "DataTableName":"VCSGIS_DATA",
                      "Description":null,
                      "EntityCode":"00000000000004abcdef0123456789",
                      "EntityName":"test",
                      "FeatureIdFieldName":"VCSGISCODE",
                      "FieldForLabel":"text",
                      "GeometryFieldName":null,
                      "RevisionCode":"00000000000016abcdef0123456789",
                      "TopologyPlanCode":null,
                      "UserCode":null,
                      "Category":null,
                      "Label":"test",
                      "Authorizations":null,
                      "TopologyPlanMode":0,
                      "Resources":null,
                      "DataModels":null,
                      "LocalRevisionCode":null
                  }
              ]
          }
        }
        
    AuthenticateRequest1:
      value: {
            "Parameters":{
                "UserId":"test",
                "Password":"password"
            }
        }
    
    AuthenticateResponse1:
      value: {
            "Parameters":{
                "StatusCode":0,
                "StatusMessage":"_No_errors",
                "UserCode":"00000000000002abcdef0123456789",
                "AuthenticationToken":"*"
            }
        }
  
    CheckoutRequest1:
      value: {
        }
    
    CheckoutResponse1:
      value: {
        }
  
    HistoryRequest1:
      value: {
        }
    
    HistoryResponse1:
      value: {
        }
  
    UsersResponse1:
      value: {
        }
  
    TopologyplansRequest1:
      value: {
        }
    
    TopologyplansResponse1:
      value: {
        }
  
    EntitiesRequest1:
      value: {
        }
    
    EntitiesResponse1:
      value: {
            "Parameters":{
                "StatusCode":0,
                "StatusMessage":null,
                "Entities":null # FIXME
            }
        }
  
  
