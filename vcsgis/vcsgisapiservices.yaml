#
# https://editor.swagger.io/
#
openapi: 3.0.0
info:
  title: VCSGis Simple API
  description: >
    Simple API to access VCSGis services
    
    
    Los ejemplos que aparecen en este documento trabajan sobre una tabla de nombre **test**
    que tiene dos unicas columnas:
    <ul>
    <li>*id*, de tipo entero, que es la clave unica de la tabla</li>
    <li>*text* a string with text.</li>
    </ul>
  version: 1.0.0
tags:
  - name: Application API
    description: >
      They provide the commands necessary to implement a 
      desktop client of a VCS.
  - name: Developers API
    description: >
      It exposes services to facilitate integration with 
      third-party applications.
paths:
  /rowcreate:
    post:
      tags:
        - Developers API
      summary: >
          Create a new record in a table/entity. 
          This operacion is a shortcut to use a commit request.
          
      operationId: RowCreate
      requestBody:
        description: >
          Data for creating the new record. 
          
          
          Provides the name of the table on which the operation will be performed,
          the revision code of the table in the working copy, **LocalRevisionCode**, 
          and the data with which the registry must be updated, **Data**,
          and insert the record in the data table creating a new revision.
          
          
          Fail if the revision code of the working copy is outdated
          or if the table or revision code is wrong.

          
          Optionally can provide a efective date and a comment for the new revision created.
                    
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RowCreateRequest'
            examples:
              request1:
                $ref: '#/components/examples/RowCreateRequest1'
        required: true
        
      responses:
        '200':
          description: >
            The response to the creation of a new record. 
            
            
            If the record is updated, the **StatusCode** returned is zero, 
            the code of the new revision created is returned is in **RevisionCode**
            and the new code asigned to the record is returned in **RelatedFeatureCode**.
            
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RowCreateResponse'
              examples:
                response1:
                  $ref: '#/components/examples/RowCreateResponse1'
                          
  /rowupdate:
    post:
      tags:
        - Developers API
      summary: >
          Update a record in a table/entity. 
          This operacion is a shortcut to use a commit request.
          
      operationId: RowUpdate
      requestBody:
        description: >
          Data for updating a record.
          
          Provides the name of the table on which the operation will be performed,
          the revision code of the table in the working copy, **LocalRevisionCode**, 
          and the data with which the registry must be updated, **Data**,
          and update the record in the data table creating a new revision.
          
          
          Fail if the revision code of the working copy is outdated,
          if the table or revision code is wrong
          or if the **Data** don't contains a valid VCSGISCODE field.
          
          
          Optionally can provide a efective date and a comment for the new revision created.
                    
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RowUpdateRequest'
            examples:
              request1:
                $ref: '#/components/examples/RowUpdateRequest1'
        required: true
      responses:
        '200':
          description: >
            The response to the creation of a new record. 
            
            
            If the record is updated, the **StatusCode** returned is zero, 
            and the code of the new revision created is returned is in **RevisionCode**. 
            

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RowUpdateResponse'
              examples:
                response1:
                  $ref: '#/components/examples/RowUpdateResponse1'
              
  /rowdelete:
    post:
      tags:
        - Developers API
      summary: >
        Delete a record in a table/entity.
        This operacion is a shortcut to use a commit request.
        
      operationId: RowDelete
      requestBody:
        description: >
          Data for deletion of a record.
          
          
          Provides the name of the table on which the operation will be performed,
          the revision code of the entity/table in the working copy, **LocalRevisionCode**, 
          and the code of the record to delete, **RelatedFeatureCode**,
          and delete the record in the table creating a new revision.
          
          
          Fail if the revision code of the working copy is outdated,
          if the table or revision code is wrong
          or if the code of the record to delete is wrong.

          
          Optionally can provide a efective date and a comment for the new revision created.
                    
          
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RowDeleteRequest'
            examples:
              request1:
                $ref: '#/components/examples/RowDeleteRequest1'
        required: true
      responses:
        '200':
          description: >
            The response of the deletion of a record. 
            
            
            If the record is deleted, the **StatusCode** returned is zero, 
            and the code of the new revision created is returned is in **RevisionCode**. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RowDeleteResponse'
              examples:
                response1:
                  $ref: '#/components/examples/RowDeleteResponse1'
  
  /update:
    post:
      tags:
        - Application API
      summary: "Brings changes from the repository to your working copy."
      operationId: Update
      requestBody:
        description: >
          It contains the information to determine what data should be sent to the client
          to mantain it up to date.
          

          Provides the name of the table on which the operation will be performed,
          the revision code of the table in the working copy, **LocalRevisionCode**.
          
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequest'
            examples:
              request1:
                $ref: '#/components/examples/UpdateRequest1'
        required: true
      responses:
        '200':
          description: >
            The response of the update request. 
            
            
            if the operacion can be performed ok, the **StatusCode** is zero, 
            and returns the metadata of the table and the list of changes required 
            to keep it up to date.

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResponse'
              examples:
                response1:
                  $ref: '#/components/examples/UpdateResponse1'
  
  /authenticated:
    post:
      tags:
        - Application API
      summary: >
         xxx.
      operationId: Authenticate
      requestBody:
        description: >
          XXX.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticateRequest'
            examples:
              request1:
                $ref: '#/components/examples/AuthenticateRequest1'
        required: true
      responses:
        '200':
          description: successful operation. A AuthenticateResponse Object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticateResponse'
              examples:
                response1:
                  $ref: '#/components/examples/AuthenticateResponse1'
                  
  /entities:
    get:
      tags:
        - Application API
      summary: >
         xxx.
      operationId: Entities-get

      responses:
        '200':
          description: successful operation. A EntitiesResponse Object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitiesResponse'
              examples:
                response1:
                  $ref: '#/components/examples/EntitiesResponse1'
    post:
      tags:
        - Application API
      summary: >
         xxx.
      operationId: Entities

      responses:
        '200':
          description: successful operation. A EntitiesResponse Object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitiesResponse'
              examples:
                response1:
                  $ref: '#/components/examples/EntitiesResponse1'

  /commit:
    post:
      tags:
        - Application API
      summary: >
         xxx.
      operationId: Commit
      requestBody:
        description: >
          XXX.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitRequest'
            examples:
              request1:
                $ref: '#/components/examples/CommitRequest1'
        required: true
        
      responses:
        '200':
          description: successful operation. A CommitResponse Object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitResponse'
              examples: 
                response1:
                  $ref: '#/components/examples/CommitResponse1'

  /checkout:
    post:
      tags:
        - Application API
      summary: xxx.
      operationId: Checkout
      requestBody:
        description: XXX.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckoutRequest'
            examples:
              request1:
                $ref: '#/components/examples/CheckoutRequest1'
        required: true
        
      responses:
        '200':
          description: successful operation. A CheckoutResponse Object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutResponse'
              examples:
                response1:
                  $ref: '#/components/examples/CheckoutResponse1'

  
  /history:
    post:
      tags:
        - Application API
      summary: >
         xxx.
      operationId: History
      requestBody:
        description: >
          XXX.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HistoryRequest'
            examples:
              request1:
                $ref: '#/components/examples/HistoryRequest1'
        required: true
        
      responses:
        '200':
          description: successful operation. A HistoryResponse Object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoryResponse'
              examples:
                response1:
                  $ref: '#/components/examples/HistoryResponse1'

  
  /users:
    get:
      tags:
        - Application API
      summary: >
         xxx.
      operationId: Users_get
      responses:
        '200':
          description: successful operation. A UsersResponse Object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
              examples:
                response1:
                  $ref: '#/components/examples/UsersResponse1'
    post:
      tags:
        - Application API
      summary: >
         xxx.
      operationId: Users
      responses:
        '200':
          description: successful operation. A UsersResponse Object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
              examples:
                response1:
                  $ref: '#/components/examples/UsersResponse1'

  
  /topologyplans:
    get:
      tags:
        - Application API
      summary: >
         xxx.
      operationId: Topologyplans_get
      responses:
        '200':
          description: successful operation. A CommitResponse Object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyplansResponse'
              examples:
                response1:
                  $ref: '#/components/examples/TopologyplansResponse1'

    post:
      tags:
        - Application API
      summary: >
         xxx.
      operationId: Topologyplans
      responses:
        '200':
          description: successful operation. A CommitResponse Object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyplansResponse'
              examples:
                response1:
                  $ref: '#/components/examples/TopologyplansResponse1'
  
components:

  schemas:
    Entity:
      type: object
      description: >
        This object represents an entity or table on the repository. 
        It contains the metadata of this, such as its name, code, code of 
        the last revision, user who created it ...

      properties:
        EntityCode:
          type: string
          format: string40
          description: >
            Code of this entity
        EntityName:
          type: string
          description: >
            Name of this entity
        DatatableName:
          type: string
          description: "Name of the table in which the entity's data is stored"
        Description:
          type: string
        FeatureIdFieldName:
          type: string
        FeatureTypeAsJson:
          type: string
        FieldForLabel:
          type: string
        GeometryFieldName:
          type: string
        RevisionCode:
          type: string
        TopologyPlanCode:
          type: string
        UserCode:
          type: string

    UpdateRequest:
      required:
      - EntityName
      - LocalRevisionCode
      type: object
      description: >
        This object is used in the body of a update request.


        This object contains the information necessary to determine what 
        data should be sent to the client so that the data of a table is 
        updated with the last revision of this one.

      properties:
        Parameters:
          $ref: "#/components/schemas/UpdateRequestParameters"

    UpdateRequestParameters:
      description: >
        This object is part of the UpdateRequest object.
      required:
      - EntityName
      - LocalRevisionCode
      properties:
        EntityName:
          type: string
          description: >
            Name of the table we want to update
        LocalRevisionCode:
          type: string
          format: string40
          description: >
            Code of the revision in which the client data is located
    
    UpdateResponse:
      type: object
      description: >
        This object is used in the response to a update request.


        It contains the necessary data to update the local table and to go 
        from being in the revision in which it is to the last revision 
        that the server contains.
      properties:
        Parameters:
          $ref: "#/components/schemas/UpdateResponseParameters"
        Data:
          type: "array"
          items:
            $ref: "#/components/schemas/UpdateResponseData"

    UpdateResponseParameters:
      description: >
        This object is part in the response of a update request.

      properties:
        StatusCode:
          type: integer
          description: "Operation status code. Zero when the operation has done correctly."
        StatusMessage:
          type: string
          description: "In case the operation did not go well, a message describing the problem."
        Entity:
          $ref: "#/components/schemas/Entity"
    
    UpdateResponseData:
      type: object
      description: >
        This object defines the data associated with a record that has 
        changed in a table. It tells us if we should delete our record 
        from the working copy, update it or insert a new one, as well 
        as the data associated with the records.
      properties:
        DataCode:
          type: string
          description: >
            Unique identifier asociated to this entry.
        EntityCode:
          type: string
          description: >
            The entity code, table, asociated to this entry.
        RevisionCode:
          type: string
          description: >
            The revision code asociated to this entry.
        Operation:
          type: integer
          description: >
            The operation asociated to this entry:
              - 0 for delete
              - 1 for update
              - 2 for insert
          enum:
            - 0 # Delete
            - 1 # Update
            - 2 # Insert
        RevisionNumber:
          type: string
          description: >
            The revision number asociated to this entry
        EfectiveDate:
          type: string
          format: timestamp
          description: >
            The efective date asociated to this entry
        FeatureRelatedCode:
          type: string
          description: >
            The code that identify the feature in the VCS.
        Data:
          type: string
          description: "The feature data coded as a json string."


    AuthenticateRequest:
      required:
      - EntityName
      - LocalRevisionCode
      type: object
      description: >
        XXXXX.

      properties:
        Parameters:
          $ref: "#/components/schemas/AuthenticateRequestParameters"

    AuthenticateRequestParameters:
      description: >
        XXX.
      required:
      - EntityName
      - LocalRevisionCode
      properties:
        EntityName:
          type: string
          description: >
            Name of the table we want to update
        LocalRevisionCode:
          type: string
          format: string40
          description: >
            Code of the revision in which the client data is located
    
    AuthenticateResponse:
      type: object
      description: >
        XXX.
      properties:
        Parameters:
          $ref: "#/components/schemas/AuthenticateResponseParameters"

    AuthenticateResponseParameters:
      description: >
        XXXX.

      properties:
        StatusCode:
          type: integer
          description: "Operation status code. Zero when the operation has done correctly."
        StatusMessage:
          type: string
          description: "In case the operation did not go well, a message describing the problem."

    CommitRequest:
      required:
      - EntityName
      - LocalRevisionCode
      type: object
      description: >
        This object is used in the body of a update request.


        This object contains the information necessary to determine what 
        data should be sent to the client so that the data of a table is 
        updated with the last revision of this one.

      properties:
        Parameters:
          $ref: "#/components/schemas/CommitRequestParameters"

    CommitRequestParameters:
      description: >
        This object is part of the UpdateRequest object.
      required:
      - EntityName
      - LocalRevisionCode
      properties:
        EntityName:
          type: string
          description: >
            Name of the table we want to update
        LocalRevisionCode:
          type: string
          format: string40
          description: >
            Code of the revision in which the client data is located
    
    CommitResponse:
      type: object
      description: >
        This object is used in the response to a update request.


        It contains the necessary data to update the local table and to go 
        from being in the revision in which it is to the last revision 
        that the server contains.
      properties:
        Parameters:
          $ref: "#/components/schemas/CommitResponseParameters"
        Data:
          type: "array"
          items:
            $ref: "#/components/schemas/CommitResponseData"

    CommitResponseParameters:
      description: >
        This object is part in the response of a update request.

      properties:
        StatusCode:
          type: integer
          description: "Operation status code. Zero when the operation has done correctly."
        StatusMessage:
          type: string
          description: "In case the operation did not go well, a message describing the problem."
        Entity:
          $ref: "#/components/schemas/Entity"
    
    CommitResponseData:
      type: object
      description: >
        This object defines the data associated with a record that has 
        changed in a table. It tells us if we should delete our record 
        from the working copy, update it or insert a new one, as well 
        as the data associated with the records.
      properties:
        DataCode:
          type: string
          description: >
            Unique identifier asociated to this entry.
        EntityCode:
          type: string
          description: >
            The entity code, table, asociated to this entry.
        RevisionCode:
          type: string
          description: >
            The revision code asociated to this entry.
        Operation:
          type: integer
          description: >
            The operation asociated to this entry:
              - 0 for delete
              - 1 for update
              - 2 for insert
          enum:
            - 0 # Delete
            - 1 # Update
            - 2 # Insert
        RevisionNumber:
          type: string
          description: >
            The revision number asociated to this entry
        EfectiveDate:
          type: string
          format: timestamp
          description: >
            The efective date asociated to this entry
        FeatureRelatedCode:
          type: string
          description: >
            The code that identify the feature in the VCS.
        Data:
          type: string
          description: "The feature data coded as a json string."

    CheckoutRequest:
      required:
      - EntityName
      - LocalRevisionCode
      type: object
      description: >
        This object is used in the body of a update request.


        This object contains the information necessary to determine what 
        data should be sent to the client so that the data of a table is 
        updated with the last revision of this one.

      properties:
        Parameters:
          $ref: "#/components/schemas/CheckoutRequestParameters"

    CheckoutRequestParameters:
      description: >
        This object is part of the UpdateRequest object.
      required:
      - EntityName
      - LocalRevisionCode
      properties:
        EntityName:
          type: string
          description: >
            Name of the table we want to update
        LocalRevisionCode:
          type: string
          format: string40
          description: >
            Code of the revision in which the client data is located
    
    CheckoutResponse:
      type: object
      description: >
        This object is used in the response to a update request.


        It contains the necessary data to update the local table and to go 
        from being in the revision in which it is to the last revision 
        that the server contains.
      properties:
        Parameters:
          $ref: "#/components/schemas/CheckoutResponseParameters"
        Data:
          type: "array"
          items:
            $ref: "#/components/schemas/CheckoutResponseData"

    CheckoutResponseParameters:
      description: >
        This object is part in the response of a update request.

      properties:
        StatusCode:
          type: integer
          description: "Operation status code. Zero when the operation has done correctly."
        StatusMessage:
          type: string
          description: "In case the operation did not go well, a message describing the problem."
        Entity:
          $ref: "#/components/schemas/Entity"
    
    CheckoutResponseData:
      type: object
      description: >
        This object defines the data associated with a record that has 
        changed in a table. It tells us if we should delete our record 
        from the working copy, update it or insert a new one, as well 
        as the data associated with the records.
      properties:
        DataCode:
          type: string
          description: >
            Unique identifier asociated to this entry.
        EntityCode:
          type: string
          description: >
            The entity code, table, asociated to this entry.
        RevisionCode:
          type: string
          description: >
            The revision code asociated to this entry.
        Operation:
          type: integer
          description: >
            The operation asociated to this entry:
              - 0 for delete
              - 1 for update
              - 2 for insert
          enum:
            - 0 # Delete
            - 1 # Update
            - 2 # Insert
        RevisionNumber:
          type: string
          description: >
            The revision number asociated to this entry
        EfectiveDate:
          type: string
          format: timestamp
          description: >
            The efective date asociated to this entry
        FeatureRelatedCode:
          type: string
          description: >
            The code that identify the feature in the VCS.
        Data:
          type: string
          description: "The feature data coded as a json string."

    EntitiesResponse:
      type: object
      description: >
        XXX.
      properties:
        Parameters:
          $ref: "#/components/schemas/EntitiesResponseParameters"

    EntitiesResponseParameters:
      description: >
        XXXX.

      properties:
        StatusCode:
          type: integer
          description: "Operation status code. Zero when the operation has done correctly."
        StatusMessage:
          type: string
          description: "In case the operation did not go well, a message describing the problem."

    HistoryRequest:
      required:
      - EntityName
      - LocalRevisionCode
      type: object
      description: >
        XXX.

      properties:
        Parameters:
          $ref: "#/components/schemas/HistoryRequestParameters"

    HistoryRequestParameters:
      description: >
        XXX.
      required:
      - EntityName
      properties:
        EntityName:
          type: string
          description: "Name of the table we want to update"
        MaxDate:
          type: string
          format: timestamp
          description: "XXX."
        MinDate:
          type: string
          format: timestamp
          description: "XXX."
        MaxRevisionNumber:
          type: integer
          description: "XXX."
        MinRevisionNumber:
          type: integer
          description: "XXX."
        MaxNumberOfRevisions:
          type: integer
          description: "XXX."

    HistoryResponse:
      type: object
      description: >
        XXX.
      properties:
        Parameters:
          $ref: "#/components/schemas/HistoryResponseParameters"
        Data:
          type: "array"
          items:
            $ref: "#/components/schemas/HistoryResponseData"

    HistoryResponseParameters:
      description: >
        XXX.

      properties:
        StatusCode:
          type: integer
          description: "Operation status code. Zero when the operation has done correctly."
        StatusMessage:
          type: string
          description: "In case the operation did not go well, a message describing the problem."

    HistoryResponseData:
      type: object
      description: >
        XXX.
      properties:
        EntityCode:
          type: string
          format: string60
          description: "The entity code asociated to this revision."
        RevisionCode:
          type: string
          format: string60
          description: "The code of this revision"
        EfectiveDate:
          type: string
          format: timestamp
          description: "The efective date of this revision"
        RevisionDate:
          type: string
          format: timestamp
          description: "The date of this revision"
        UserCode:
          type: string
          format: string60
          description: ""
        Number:
          type: integer
          description: "The revision number"
        Comment:
          type: string
          description: ""
        Tags:
          type: string
          description: ""
        TopologyPlan:
          type: integer
          description: "Status of the topology plan asociated to this revision."

    UsersResponse:
      type: object
      description: >
        XXX.
      properties:
        Parameters:
          $ref: "#/components/schemas/UsersResponseParameters"
        Data:
          type: "array"
          items:
            $ref: "#/components/schemas/UsersResponseData"

    UsersResponseParameters:
      description: >
        XXX.

      properties:
        StatusCode:
          type: integer
          description: "Operation status code. Zero when the operation has done correctly."
        StatusMessage:
          type: string
          description: "In case the operation did not go well, a message describing the problem."

    UsersResponseData:
      type: object
      description: >
        XXX.
      properties:
        UserCode:
          type: string
          format: string60
          description: "The entity code asociated to this revision."
        Identifier:
          type: string
          description: "The code of this revision"
        AllowedOperations:
          type: string
          description: "XXX"
        Roles:
          type: string
          description: "XXX"
        Description:
          type: string
          description: ""

    TopologyplansResponse:
      type: object
      description: >
        XXX.
      properties:
        Parameters:
          $ref: "#/components/schemas/TopologyplansResponseParameters"
        Data:
          type: "array"
          items:
            $ref: "#/components/schemas/TopologyplansResponseData"

    TopologyplansResponseParameters:
      description: >
        XXX.

      properties:
        StatusCode:
          type: integer
          description: "Operation status code. Zero when the operation has done correctly."
        StatusMessage:
          type: string
          description: "In case the operation did not go well, a message describing the problem."

    TopologyplansResponseData:
      type: object
      description: >
        XXX.
      properties:
        TopologyPlanCode:
          type: string
          format: string60
          description: "The entity code asociated to this revision."
        Name:
          type: string
          description: "The name of this topology plan"
        Description:
          type: string
          description: ""
        Data:
          type: string
          description: ""


    RowCreateRequest:
      required:
      - EntityName
      - LocalRevisionCode
      - Data
      type: object
      description: >
        This object represents a request to create a new record in a
        table.

        When the record is created, a unique code will be assigned with
        the VCS, overwriting the value of the VCSGISCODE attribute with the new
        value.

      properties:
        EntityName:
          type: string
          description: >
            Name of the table in which to create the new record
        LocalRevisionCode:
          type: string
          format: string40
          description: >
            Code of the revision in which the client data is found
        EfectiveDate:
          type: string
          format: timestamp
          description: >
            Efective date of the operation, in the format yyyy-mm-dd
            hh: MM: ss.LLL. In case of being null, the current date will be assigned.
        Comment:
          type: string
          description: >
            Comment associated with the operation to be performed. It can be null.
        Data:
          type: string
          description: >
            The feature data to create in the table coded as a
            string json. If the feature has the VCSGISCODE field it will be
            overwritten, assigning a new code to it.
            
    RowCreateResponse:
      type: object
      description: >
        This object represents the response to a request to create a new
        record in a table.
        You will inform us of the status of the request, as well as:
          - The code of the new record created.
          - The code of the revision in which the
            table on the server.

      properties:
        StatusCode:
          type: integer
          description: >
            Status code of the operation. Zero when the operation has been
            done correctly.
        StatusMessage:
          type: string
          description: >
            In case the operation did not go well, a message describing
            the problem.
        RelatedFeatureCode:
          type: string
          format: string40
          description: >
            Code assigned to the VCSGISCODE field of the new record, which
            represents the identifier of this in the VCS.
        EntityName:
          type: string
          description: >
            Name of the table in which the new one was requested to be created
            registry
        EntityCode:
          type: string
          format: string40
          description: >
            Internal code associated with the table to identify it in a way
            Unique.
        RevisionCode:
          type: string
          format: string40
          description: >
            Code of the revision in which the data is found in the
            server after the operation is performed.


    RowUpdateRequest:
      required:
      - EntityName
      - LocalRevisionCode
      - Data
      type: object
      description: >
        This object represents a request to update a record in a
        table.

        It is essential that the value of the VCSGISCODE attribute of the 
        data of the record that we want to update has the correct code, 
        since it is used to identify the record we want to update.

      properties:
        EntityName:
          type: string
          description: >
            Name of the table in which the record is requested to be updated
        LocalRevisionCode:
          type: string
          format: string40
          description: >
            Code of the revision in which the client data is located
        EfectiveDate:
          type: string
          format: timestamp
          description: >
            Efective date of the operation, in the format yyyy-mm-dd
            hh:MM:ss.LLL. In case of being null, the current date will be assigned.
        Comment:
          type: string
          description: >
            Comment associated with the operation to be performed. It can be null.
        Data:
          type: string
          description: >
            The feature data to create in the table coded as a
            string json. The VCSGISCODE attribute must have a valid code and
            It will identify the record that is being updated.
            
    RowUpdateResponse:
      type: object
      description: >
        This object represents the response to a request to update a
        record in a table.

      properties:
        StatusCode:
          type: integer
          description: >
            Operation status code. Zero when the operation has
            done correctly.
        StatusMessage:
          type: string
          description: >
            In case the operation did not go well, a message describing
            the problem.
        EntityName:
          type: string
          description: >
            Name of the table in which the requested was create the new record
        EntityCode:
          type: string
          format: string40
          description: >
            Internal code associated with the table to identify.
        RevisionCode:
          type: string
          format: string40
          description: >
            Code of the revision in which the data is found in the
            server after the operation is performed.

    RowDeleteRequest:
      required:
      - EntityName
      - LocalRevisionCode
      - RelatedFeatureCode
      type: object
      description: >
        This object represents a request to delete a record in a
        table.


        The record to be deleted will be identified by the value of the
        *RelatedFeatureCode* attribute.
        
      properties:
        EntityName:
          type: string
          description: >
            Name of the table in which to delete the record
        LocalRevisionCode:
          type: string
          format: string40
          description: >
            Code of the revision in which the client data is located
        EfectiveDate:
          type: string
          format: timestamp
          description: >
            Efective date of the operation, in the format yyyy-mm-dd
            hh:MM:ss.LLL. In case of being null, the current date will be assigned.
        Comment:
          type: string
          description: >
            Comment associated with the operation to be performed. It can be null.
        RelatedFeatureCode:
          type: string
          format: string40
          description: >
            Code of the record to be deleted. Delete the record that
            have the value of the VCSGISCODE attribute as the value of this field.
    
    RowDeleteResponse:
      type: object
      description: >
        This object represents the response to a request to delete a
        record in a table.

      properties:
        StatusCode:
          type: integer
          description: >
            Operation status code. Zero when the operation has
            done correctly.
        StatusMessage:
          type: string
          description: >
            In case the operation did not go well, a message describing
            the problem.
        EntityName:
          type: string
          description: >
            Name of the table in which the new one was requested to be created
            registry
        EntityCode:
          type: string
          format: string40
          description: >
            Internal code associated with the table to identify.
        RevisionCode:
          type: string
          format: string40
          description: >
            Code of the revision in which the data is found in the
            server after the operation is performed.


  examples:
    RowCreateRequest1:
      value: {
          "EntityName":"test",
          "LocalRevisionCode":"00000000000016abcdef0123456789",
          "EfectiveDate":"2020-02-18 10:11:12.123",
          "Comment":"test row create (4,ddd)",
          "Data":"\n{\n    \"id\":4,\n    \"text\":\"DDD\",\n    \"VCSGISCODE\":\"\"\n}"
        }
    
    RowCreateResponse1:
      value: {
          "StatusCode":0,
          "StatusMessage":null,
          "RelatedFeatureCode":"00000000000024abcdef0123456789",
          "EntityName":"test",
          "EntityCode":"00000000000004abcdef0123456789",
          "RevisionCode":"00000000000026abcdef0123456789"
        }

    RowUpdateRequest1:
      value: {
          "EntityName":"test",
          "LocalRevisionCode":"00000000000026abcdef0123456789",
          "EfectiveDate":null,
          "Comment":"test row update (4,dd2)",
          "Data":"\n{\n    \"id\":4,\n    \"text\":\"DD2\",\n    \"VCSGISCODE\":\"00000000000024abcdef0123456789\"\n}"
        }
    
    RowUpdateResponse1:
      value: {
          "StatusCode":0,
          "StatusMessage":null,
          "EntityName":"test",
          "EntityCode":"00000000000004abcdef0123456789",
          "RevisionCode":"00000000000031abcdef0123456789"
        }
        
    RowDeleteRequest1:
      value: {
          "EntityName":"test",
          "LocalRevisionCode":"00000000000031abcdef0123456789",
          "RelatedFeatureCode":"00000000000024abcdef0123456789",
          "EfectiveDate":"2020-02-19 10:11:12.123",
          "Comment":"test row delete (4,dd2)"
        }
    
    RowDeleteResponse1:
      value: {
          "StatusCode":0,
          "StatusMessage":null,
          "EntityName":"test",
          "EntityCode":"00000000000004abcdef0123456789",
          "RevisionCode":"00000000000036abcdef0123456789"
        }

    UpdateRequest1:
      value: {
          "Parameters":{
              "EntityName":"test",
              "LocalRevisionCode":"00000000000016abcdef0123456789"
          }
        }
    
    UpdateResponse1:
      value: {
                "Parameters":{
                    "StatusCode":0,
                    "StatusMessage":"_No_errors",
                    "Entity":{
                        "DataTableName":"VCSGIS_DATA",
                        "Description":null,
                        "EntityCode":"00000000000004abcdef0123456789",
                        "EntityName":"test",
                        "FeatureIdFieldName":"VCSGISCODE",
                        "FieldForLabel":"text",
                        "GeometryFieldName":null,
                        "RevisionCode":"00000000000032abcdef0123456789",
                        "TopologyPlanCode":null,
                        "UserCode":null,
                        "Category":null,
                        "Label":"test",
                        "TopologyPlanMode":0,
                        "Resources":null,
                        "DataModels":null
                    }
                },
                "Data":[
                    {
                        "DataCode":"00000000000036abcdef0123456789",
                        "EntityCode":"00000000000004abcdef0123456789",
                        "RevisionCode":"00000000000032abcdef0123456789",
                        "RevisionNumber":1,
                        "EfectiveDate":"2020-02-17 10:11:12.123",
                        "Operation":2,
                        "FeatureRelatedCode":"00000000000026abcdef0123456789",
                        "Data":"\n{\n    \"id\":4,\n    \"text\":\"DDD\",\n    \"VCSGISCODE\":\"00000000000026abcdef0123456789\"\n}"
                    },
                    {
                        "DataCode":"00000000000034abcdef0123456789",
                        "EntityCode":"00000000000004abcdef0123456789",
                        "RevisionCode":"00000000000032abcdef0123456789",
                        "RevisionNumber":1,
                        "EfectiveDate":"2020-02-17 10:11:12.123",
                        "Operation":1,
                        "FeatureRelatedCode":"00000000000008abcdef0123456789",
                        "Data":"\n{\n    \"id\":2,\n    \"text\":\"BB2\",\n    \"VCSGISCODE\":\"00000000000008abcdef0123456789\"\n}"
                    }
                ]
        }
        
    CommitRequest1:
      value: {
              "Parameters":{
                  "EfectiveDate":null,
                  "RevisionDate":null,
                  "Comment":null,
                  "Entities":null,
                  "NewEntityCodes":[
                      "00000000000004abcdef0123456789"
                  ]
              },
              "Data":[
                  {
                      "Code":"00000000000007abcdef0123456789",
                      "EntityCode":"00000000000004abcdef0123456789",
                      "Operation":2,
                      "RelatedFeatureCode":"00000000000006abcdef0123456789",
                      "Data":"\n{\n    \"id\":1,\n    \"text\":\"AAA\",\n    \"VCSGISCODE\":\"00000000000006abcdef0123456789\"\n}"
                  },
                  {
                      "Code":"00000000000009abcdef0123456789",
                      "EntityCode":"00000000000004abcdef0123456789",
                      "Operation":2,
                      "RelatedFeatureCode":"00000000000008abcdef0123456789",
                      "Data":"\n{\n    \"id\":2,\n    \"text\":\"BBB\",\n    \"VCSGISCODE\":\"00000000000008abcdef0123456789\"\n}"
                  },
                  {
                      "Code":"00000000000011abcdef0123456789",
                      "EntityCode":"00000000000004abcdef0123456789",
                      "Operation":2,
                      "RelatedFeatureCode":"00000000000010abcdef0123456789",
                      "Data":"\n{\n    \"id\":3,\n    \"text\":\"CCC\",\n    \"VCSGISCODE\":\"00000000000010abcdef0123456789\"\n}"
                  }
              ]
        }
    
    CommitResponse1:
      value: {
          "Parameters":{
              "StatusCode":0,
              "StatusMessage":null,
              "Entities":[
                  {
                      "DataTableName":"VCSGIS_DATA",
                      "Description":null,
                      "EntityCode":"00000000000004abcdef0123456789",
                      "EntityName":"test",
                      "FeatureIdFieldName":"VCSGISCODE",
                      "FieldForLabel":"text",
                      "GeometryFieldName":null,
                      "RevisionCode":"00000000000016abcdef0123456789",
                      "TopologyPlanCode":null,
                      "UserCode":null,
                      "Category":null,
                      "Label":"test",
                      "Authorizations":null,
                      "TopologyPlanMode":0,
                      "Resources":null,
                      "DataModels":null,
                      "LocalRevisionCode":null
                  }
              ]
          }
        }
        
    AuthenticateRequest1:
      value: {
            "Parameters":{
                "UserId":"test",
                "Password":"password"
            }
        }
    
    AuthenticateResponse1:
      value: {
            "Parameters":{
                "StatusCode":0,
                "StatusMessage":"_No_errors",
                "UserCode":"00000000000002abcdef0123456789",
                "AuthenticationToken":"*"
            }
        }
  
    CheckoutRequest1:
      value: {
        }
    
    CheckoutResponse1:
      value: {
        }
  
    HistoryRequest1:
      value: {
        }
    
    HistoryResponse1:
      value: {
        }
  
    UsersResponse1:
      value: {
        }
  
    TopologyplansRequest1:
      value: {
        }
    
    TopologyplansResponse1:
      value: {
        }
  
    EntitiesRequest1:
      value: {
        }
    
    EntitiesResponse1:
      value: {
            "Parameters":{
                "StatusCode":0,
                "StatusMessage":null,
                "Entities":null # FIXME
            }
        }
  
  
